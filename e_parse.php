<?php

/**
 * @file
 * Addon file for extending e_parser.
 */

if(!defined('e107_INIT'))
{
	exit;
}

// This file is generated by Composer.
e107_require_once(e_PLUGIN . 'simplemde/vendor/autoload.php');

use League\HTMLToMarkdown\HtmlConverter;

/**
 * Class simplemde_parse.
 */
class simplemde_parse
{

	/**
	 * Plugin preferences.
	 *
	 * @var array
	 */
	private $plugPrefs = array();

	/**
	 * Constructor.
	 */
	function __construct()
	{
		$this->plugPrefs = e107::getPlugConfig('simplemde')->getPref();
	}

	/**
	 * @param string $text
	 *  HTML/text to be processed.
	 * @param string $context
	 *  Current context ie:
	 *  OLDDEFAULT | BODY | TITLE | SUMMARY | DESCRIPTION | WYSIWYG
	 *
	 * @return string
	 */
	function toHtml($text, $context = '')
	{
		return $text;
	}

	/**
	 * @param string $text
	 *  HTML/text to be processed.
	 * @param array $param
	 *
	 * @return string
	 */
	function toDB($text, $param = array())
	{
		$type = varset($param['type'], '');
		$field = varset($param['field'], '');

		if($type == 'bbarea')
		{
			return '[markdown]' . $text . '[/markdown]';
		}

		$fields = array(
			'news_body',
			'news_extended',
		);

		if(in_array($field, $fields) && $type == 'method')
		{
			return '[markdown]' . $text . '[/markdown]';
		}

		return $text;
	}

	/**
	 * @param string $text
	 *  HTML/text to be processed.
	 * @param array $param
	 *
	 * @return string
	 */
	function toWYSIWYG($text, $param = array())
	{
		if(substr($text, 0, 6) == '[html]')
		{
			$tp = e107::getParser();
			$text = $tp->toHTML($text, true);
		}

		// Convert special HTML entities back to characters.
		$text = htmlspecialchars_decode($text);

		// Remove HTML comments.
		$text = preg_replace('/<!--(.*)-->/Uis', '', $text);

		if($this->isHTML($text))
		{
			$converter = new HtmlConverter();
			// Strip HTML tags that don't have a Markdown equivalent.
			$converter->getConfig()->setOption('strip_tags', true);
			// Convert <br> to \n
			$converter->getConfig()->setOption('hard_break', true);

			if((bool) varset($this->plugPrefs['allowAtxHeaderWithoutSpace'], 0) === true)
			{
				// Set to 'atx' to output H1 and H2 headers as # Header1 and ## Header2.
				$converter->getConfig()->setOption('header_style', 'atx');
			}

			$text = $converter->convert($text);
		}

		return $text;
	}

	/**
	 * Checking whether $string is HTML or not.
	 *
	 * @param string $string
	 *  String to be checked.
	 *
	 * @return bool
	 *  True if the string is HTML, otherwise false.
	 */
	function isHTML($string)
	{
		if($string != strip_tags($string))
		{
			return true;
		}

		return preg_match("/<[^<]+>/", $string, $m) != 0;
	}

}
